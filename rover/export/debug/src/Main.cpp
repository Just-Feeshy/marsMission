// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_Log
#include <Log.h>
#endif
#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_Sys
#include <Sys.h>
#endif
#ifndef INCLUDED_WorldMap
#include <WorldMap.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_haxe_io_Input
#include <haxe/io/Input.h>
#endif
#ifndef INCLUDED_sys_FileSystem
#include <sys/FileSystem.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_14_main,"Main","main",0xed0e206e,"Main.main","Main.hx",14,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_47_loop,"Main","loop",0xec6f8e99,"Main.loop","Main.hx",47,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_63_execute,"Main","execute",0x303e7120,"Main.execute","Main.hx",63,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_66_begin,"Main","begin",0x2c893054,"Main.begin","Main.hx",66,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_10_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",10,0x087e5c05)
HX_LOCAL_STACK_FRAME(_hx_pos_e47a9afac0942eb9_11_boot,"Main","boot",0xe5d36c67,"Main.boot","Main.hx",11,0x087e5c05)

void Main_obj::__construct() { }

Dynamic Main_obj::__CreateEmpty() { return new Main_obj; }

void *Main_obj::_hx_vtable = 0;

Dynamic Main_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Main_obj > _hx_result = new Main_obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Main_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x07825a7d;
}

int Main_obj::id;

int Main_obj::round;

 ::WorldMap Main_obj::map;

void Main_obj::main(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_14_main)
HXLINE(  15)		::haxe::Log_obj::trace(HX_("enter id: ",49,27,25,1b),::hx::SourceInfo(HX_("source/Main.hx",91,d3,a7,40),15,HX_("Main",59,64,2f,33),HX_("main",39,38,56,48)));
HXLINE(  16)		::Main_obj::id = ( (int)(::Std_obj::parseInt(::Sys_obj::_hx_stdin()->readLine())) );
HXLINE(  18)		::Main_obj::begin(::Main_obj::id);
HXLINE(  19)		::Main_obj::execute();
HXLINE(  20)		::Main_obj::loop(::Main_obj::id);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,main,(void))

void Main_obj::loop(int id){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_47_loop)
HXLINE(  48)		::String directory = HX_("../../../",8f,8c,ef,d0);
HXLINE(  50)		while(true){
HXLINE(  51)			::String event = (((((directory + HX_("game/s",d6,7d,f9,50)) + id) + HX_("_",5f,00,00,00)) + (::Main_obj::round + 1)) + HX_(".txt",02,3f,c0,1e));
HXLINE(  53)			if (!(::sys::FileSystem_obj::exists(event))) {
HXLINE(  54)				continue;
            			}
HXLINE(  57)			::Main_obj::round++;
HXLINE(  58)			::Main_obj::execute();
            		}
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Main_obj,loop,(void))

void Main_obj::execute(){
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_63_execute)
HXDLIN(  63)		::Main_obj::map->doPathFinding();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC0(Main_obj,execute,(void))

void Main_obj::begin(int id){
            	HX_GC_STACKFRAME(&_hx_pos_e47a9afac0942eb9_66_begin)
HXLINE(  67)		::String directory = HX_("../../../",8f,8c,ef,d0);
HXLINE(  68)		::String serverFileName = (((((directory + HX_("game/s",d6,7d,f9,50)) + id) + HX_("_",5f,00,00,00)) + ::Main_obj::round) + HX_(".txt",02,3f,c0,1e));
HXLINE(  70)		while(true){
HXLINE(  71)			::String temp = (((((directory + HX_("game/s",d6,7d,f9,50)) + id) + HX_("_",5f,00,00,00)) + (::Main_obj::round + 1)) + HX_(".txt",02,3f,c0,1e));
HXLINE(  73)			if (!(::sys::FileSystem_obj::exists(temp))) {
HXLINE(  74)				goto _hx_goto_4;
            			}
HXLINE(  77)			::Main_obj::round++;
HXLINE(  78)			serverFileName = temp;
            		}
            		_hx_goto_4:;
HXLINE(  81)		if (!(::sys::FileSystem_obj::exists(serverFileName))) {
HXLINE(  82)			::Log_obj::warning(((HX_("Directory",4d,d2,17,b2) + serverFileName) + HX_(" does not exist.",eb,90,4a,9f)));
            		}
HXLINE(  85)		::Main_obj::map =  ::WorldMap_obj::__alloc( HX_CTX ,serverFileName);
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Main_obj,begin,(void))


Main_obj::Main_obj()
{
}

bool Main_obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { outValue = ( id ); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { outValue = ( map ); return true; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"main") ) { outValue = main_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"loop") ) { outValue = loop_dyn(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"round") ) { outValue = ( round ); return true; }
		if (HX_FIELD_EQ(inName,"begin") ) { outValue = begin_dyn(); return true; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"execute") ) { outValue = execute_dyn(); return true; }
	}
	return false;
}

bool Main_obj::__SetStatic(const ::String &inName,Dynamic &ioValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"id") ) { id=ioValue.Cast< int >(); return true; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"map") ) { map=ioValue.Cast<  ::WorldMap >(); return true; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"round") ) { round=ioValue.Cast< int >(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Main_obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo Main_obj_sStaticStorageInfo[] = {
	{::hx::fsInt,(void *) &Main_obj::id,HX_("id",db,5b,00,00)},
	{::hx::fsInt,(void *) &Main_obj::round,HX_("round",4e,f8,65,ed)},
	{::hx::fsObject /*  ::WorldMap */ ,(void *) &Main_obj::map,HX_("map",9c,0a,53,00)},
	{ ::hx::fsUnknown, 0, null()}
};
#endif

static void Main_obj_sMarkStatics(HX_MARK_PARAMS) {
	HX_MARK_MEMBER_NAME(Main_obj::id,"id");
	HX_MARK_MEMBER_NAME(Main_obj::round,"round");
	HX_MARK_MEMBER_NAME(Main_obj::map,"map");
};

#ifdef HXCPP_VISIT_ALLOCS
static void Main_obj_sVisitStatics(HX_VISIT_PARAMS) {
	HX_VISIT_MEMBER_NAME(Main_obj::id,"id");
	HX_VISIT_MEMBER_NAME(Main_obj::round,"round");
	HX_VISIT_MEMBER_NAME(Main_obj::map,"map");
};

#endif

::hx::Class Main_obj::__mClass;

static ::String Main_obj_sStaticFields[] = {
	HX_("id",db,5b,00,00),
	HX_("round",4e,f8,65,ed),
	HX_("map",9c,0a,53,00),
	HX_("main",39,38,56,48),
	HX_("loop",64,a6,b7,47),
	HX_("execute",35,0a,0d,cc),
	HX_("begin",29,ea,55,b0),
	::String(null())
};

void Main_obj::__register()
{
	Main_obj _hx_dummy;
	Main_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("Main",59,64,2f,33);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Main_obj::__GetStatic;
	__mClass->mSetStaticField = &Main_obj::__SetStatic;
	__mClass->mMarkFunc = Main_obj_sMarkStatics;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Main_obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Main_obj >;
#ifdef HXCPP_VISIT_ALLOCS
	__mClass->mVisitFunc = Main_obj_sVisitStatics;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Main_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Main_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

void Main_obj::__boot()
{
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_10_boot)
HXDLIN(  10)		id = 0;
            	}
{
            	HX_STACKFRAME(&_hx_pos_e47a9afac0942eb9_11_boot)
HXDLIN(  11)		round = 0;
            	}
}

