// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_Main
#include <Main.h>
#endif
#ifndef INCLUDED_Player
#include <Player.h>
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_WorldMap
#include <WorldMap.h>
#endif
#ifndef INCLUDED_sys_io_File
#include <sys/io/File.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_7a93e64a639decc4_6_new,"WorldMap","new",0x1564557c,"WorldMap.new","WorldMap.hx",6,0x688fed74)
HX_LOCAL_STACK_FRAME(_hx_pos_7a93e64a639decc4_36_refresh,"WorldMap","refresh",0x34901cf7,"WorldMap.refresh","WorldMap.hx",36,0x688fed74)

void WorldMap_obj::__construct(::String serverFile){
            	HX_GC_STACKFRAME(&_hx_pos_7a93e64a639decc4_6_new)
HXLINE(  12)		this->length = 0;
HXLINE(  15)		this->content = ::sys::io::File_obj::getContent(serverFile);
HXLINE(  16)		::Array< ::String > lines = this->content.split(HX_("\n",0a,00,00,00));
HXLINE(  17)		this->length = lines->length;
HXLINE(  19)		this->width = ( (int)(::Std_obj::parseInt(lines->__get(0).split(HX_(" ",20,00,00,00))->__get(0))) );
HXLINE(  20)		this->height = ( (int)(::Std_obj::parseInt(lines->__get(0).split(HX_(" ",20,00,00,00))->__get(1))) );
HXLINE(  22)		this->matrix = ::Array_obj< ::Dynamic>::__new(0);
HXLINE(  27)		this->player =  ::Player_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE(  28)		::String _hx_tmp = lines->__get((this->height + 1)).split(HX_(" ",20,00,00,00))->__get(0);
HXDLIN(  28)		this->player->x = ( (int)(::Std_obj::parseInt(_hx_tmp)) );
HXLINE(  29)		 ::Dynamic _hx_tmp1 = ::Std_obj::parseInt(lines->__get((this->height + 1)).split(HX_(" ",20,00,00,00))->__get(1));
HXDLIN(  29)		this->player->y = (_hx_tmp1 + 1);
HXLINE(  31)		{
HXLINE(  31)			int _g = 1;
HXDLIN(  31)			int _g1 = (this->height + 1);
HXDLIN(  31)			while((_g < _g1)){
HXLINE(  31)				_g = (_g + 1);
HXDLIN(  31)				int i = (_g - 1);
HXLINE(  32)				this->matrix[i] = lines->__get(i).split(HX_(" ",20,00,00,00));
            			}
            		}
            	}

Dynamic WorldMap_obj::__CreateEmpty() { return new WorldMap_obj; }

void *WorldMap_obj::_hx_vtable = 0;

Dynamic WorldMap_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< WorldMap_obj > _hx_result = new WorldMap_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool WorldMap_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x30afffae;
}

void WorldMap_obj::refresh(){
            	HX_STACKFRAME(&_hx_pos_7a93e64a639decc4_36_refresh)
HXLINE(  37)		::String directory = HX_("../../../",8f,8c,ef,d0);
HXLINE(  38)		::String serverFileName = (((((directory + HX_("game/s",d6,7d,f9,50)) + ::Main_obj::id) + HX_("_",5f,00,00,00)) + ::Main_obj::round) + HX_(".txt",02,3f,c0,1e));
HXLINE(  40)		this->content = ::sys::io::File_obj::getContent(serverFileName);
HXLINE(  41)		::Array< ::String > lines = this->content.split(HX_("\n",0a,00,00,00));
HXLINE(  43)		::String _hx_tmp = lines->__get((this->height + 1)).split(HX_(" ",20,00,00,00))->__get(0);
HXDLIN(  43)		this->player->x = ( (int)(::Std_obj::parseInt(_hx_tmp)) );
HXLINE(  44)		 ::Dynamic _hx_tmp1 = ::Std_obj::parseInt(lines->__get((this->height + 1)).split(HX_(" ",20,00,00,00))->__get(1));
HXDLIN(  44)		this->player->y = (_hx_tmp1 + 1);
            	}


HX_DEFINE_DYNAMIC_FUNC0(WorldMap_obj,refresh,(void))


::hx::ObjectPtr< WorldMap_obj > WorldMap_obj::__new(::String serverFile) {
	::hx::ObjectPtr< WorldMap_obj > __this = new WorldMap_obj();
	__this->__construct(serverFile);
	return __this;
}

::hx::ObjectPtr< WorldMap_obj > WorldMap_obj::__alloc(::hx::Ctx *_hx_ctx,::String serverFile) {
	WorldMap_obj *__this = (WorldMap_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(WorldMap_obj), true, "WorldMap"));
	*(void **)__this = WorldMap_obj::_hx_vtable;
	__this->__construct(serverFile);
	return __this;
}

WorldMap_obj::WorldMap_obj()
{
}

void WorldMap_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(WorldMap);
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(content,"content");
	HX_MARK_MEMBER_NAME(matrix,"matrix");
	HX_MARK_MEMBER_NAME(player,"player");
	HX_MARK_MEMBER_NAME(length,"length");
	HX_MARK_END_CLASS();
}

void WorldMap_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(content,"content");
	HX_VISIT_MEMBER_NAME(matrix,"matrix");
	HX_VISIT_MEMBER_NAME(player,"player");
	HX_VISIT_MEMBER_NAME(length,"length");
}

::hx::Val WorldMap_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"matrix") ) { return ::hx::Val( matrix ); }
		if (HX_FIELD_EQ(inName,"player") ) { return ::hx::Val( player ); }
		if (HX_FIELD_EQ(inName,"length") ) { return ::hx::Val( length ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"content") ) { return ::hx::Val( content ); }
		if (HX_FIELD_EQ(inName,"refresh") ) { return ::hx::Val( refresh_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val WorldMap_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"matrix") ) { matrix=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		if (HX_FIELD_EQ(inName,"player") ) { player=inValue.Cast<  ::Player >(); return inValue; }
		if (HX_FIELD_EQ(inName,"length") ) { length=inValue.Cast< int >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"content") ) { content=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void WorldMap_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("content",39,8d,77,19));
	outFields->push(HX_("matrix",41,36,c8,bb));
	outFields->push(HX_("player",61,eb,b8,37));
	outFields->push(HX_("length",e6,94,07,9f));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo WorldMap_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(WorldMap_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsInt,(int)offsetof(WorldMap_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsString,(int)offsetof(WorldMap_obj,content),HX_("content",39,8d,77,19)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(WorldMap_obj,matrix),HX_("matrix",41,36,c8,bb)},
	{::hx::fsObject /*  ::Player */ ,(int)offsetof(WorldMap_obj,player),HX_("player",61,eb,b8,37)},
	{::hx::fsInt,(int)offsetof(WorldMap_obj,length),HX_("length",e6,94,07,9f)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *WorldMap_obj_sStaticStorageInfo = 0;
#endif

static ::String WorldMap_obj_sMemberFields[] = {
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("content",39,8d,77,19),
	HX_("matrix",41,36,c8,bb),
	HX_("player",61,eb,b8,37),
	HX_("length",e6,94,07,9f),
	HX_("refresh",db,d9,20,ed),
	::String(null()) };

::hx::Class WorldMap_obj::__mClass;

void WorldMap_obj::__register()
{
	WorldMap_obj _hx_dummy;
	WorldMap_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("WorldMap",8a,27,3d,7e);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(WorldMap_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< WorldMap_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = WorldMap_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = WorldMap_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

