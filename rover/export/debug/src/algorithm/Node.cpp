// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_algorithm_Node
#include <algorithm/Node.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_830657d472c1488f_15_new,"algorithm.Node","new",0xe4983bf3,"algorithm.Node.new","algorithm/Node.hx",15,0xc08934fc)
HX_LOCAL_STACK_FRAME(_hx_pos_830657d472c1488f_22_f,"algorithm.Node","f",0x0af05139,"algorithm.Node.f","algorithm/Node.hx",22,0xc08934fc)
namespace algorithm{

void Node_obj::__construct(int x,int y){
            	HX_STACKFRAME(&_hx_pos_830657d472c1488f_15_new)
HXLINE(  16)		this->x = x;
HXLINE(  17)		this->y = y;
HXLINE(  18)		this->g = 0;
            	}

Dynamic Node_obj::__CreateEmpty() { return new Node_obj; }

void *Node_obj::_hx_vtable = 0;

Dynamic Node_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Node_obj > _hx_result = new Node_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Node_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x121cc525;
}

int Node_obj::f(int h){
            	HX_STACKFRAME(&_hx_pos_830657d472c1488f_22_f)
HXDLIN(  22)		return (this->g + h);
            	}


HX_DEFINE_DYNAMIC_FUNC1(Node_obj,f,return )


Node_obj::Node_obj()
{
}

void Node_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Node);
	HX_MARK_MEMBER_NAME(g,"g");
	HX_MARK_MEMBER_NAME(h,"h");
	HX_MARK_MEMBER_NAME(_hx_char,"char");
	HX_MARK_MEMBER_NAME(priority,"priority");
	HX_MARK_MEMBER_NAME(x,"x");
	HX_MARK_MEMBER_NAME(y,"y");
	HX_MARK_MEMBER_NAME(parent,"parent");
	HX_MARK_MEMBER_NAME(direction,"direction");
	HX_MARK_END_CLASS();
}

void Node_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(g,"g");
	HX_VISIT_MEMBER_NAME(h,"h");
	HX_VISIT_MEMBER_NAME(_hx_char,"char");
	HX_VISIT_MEMBER_NAME(priority,"priority");
	HX_VISIT_MEMBER_NAME(x,"x");
	HX_VISIT_MEMBER_NAME(y,"y");
	HX_VISIT_MEMBER_NAME(parent,"parent");
	HX_VISIT_MEMBER_NAME(direction,"direction");
}

::hx::Val Node_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { return ::hx::Val( g ); }
		if (HX_FIELD_EQ(inName,"h") ) { return ::hx::Val( h ); }
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		if (HX_FIELD_EQ(inName,"f") ) { return ::hx::Val( f_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"char") ) { return ::hx::Val( _hx_char ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { return ::hx::Val( parent ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"priority") ) { return ::hx::Val( priority ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"direction") ) { return ::hx::Val( direction ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Node_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"g") ) { g=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"h") ) { h=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< int >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"char") ) { _hx_char=inValue.Cast< ::String >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"parent") ) { parent=inValue.Cast<  ::algorithm::Node >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"priority") ) { priority=inValue.Cast< int >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"direction") ) { direction=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Node_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("g",67,00,00,00));
	outFields->push(HX_("h",68,00,00,00));
	outFields->push(HX_("char",d6,5e,bf,41));
	outFields->push(HX_("priority",64,7b,3e,bb));
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	outFields->push(HX_("parent",2a,05,7e,ed));
	outFields->push(HX_("direction",3f,62,40,10));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Node_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(Node_obj,g),HX_("g",67,00,00,00)},
	{::hx::fsInt,(int)offsetof(Node_obj,h),HX_("h",68,00,00,00)},
	{::hx::fsString,(int)offsetof(Node_obj,_hx_char),HX_("char",d6,5e,bf,41)},
	{::hx::fsInt,(int)offsetof(Node_obj,priority),HX_("priority",64,7b,3e,bb)},
	{::hx::fsInt,(int)offsetof(Node_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsInt,(int)offsetof(Node_obj,y),HX_("y",79,00,00,00)},
	{::hx::fsObject /*  ::algorithm::Node */ ,(int)offsetof(Node_obj,parent),HX_("parent",2a,05,7e,ed)},
	{::hx::fsString,(int)offsetof(Node_obj,direction),HX_("direction",3f,62,40,10)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Node_obj_sStaticStorageInfo = 0;
#endif

static ::String Node_obj_sMemberFields[] = {
	HX_("g",67,00,00,00),
	HX_("h",68,00,00,00),
	HX_("char",d6,5e,bf,41),
	HX_("priority",64,7b,3e,bb),
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("parent",2a,05,7e,ed),
	HX_("direction",3f,62,40,10),
	HX_("f",66,00,00,00),
	::String(null()) };

::hx::Class Node_obj::__mClass;

void Node_obj::__register()
{
	Node_obj _hx_dummy;
	Node_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("algorithm.Node",81,c6,50,c0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Node_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Node_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Node_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Node_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace algorithm
