// Generated by Haxe 4.3.1
#include <hxcpp.h>

#ifndef INCLUDED_algorithm_PriorityQueue
#include <algorithm/PriorityQueue.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_5e954be312f7dcde_11_new,"algorithm.PriorityQueue","new",0xfc3ec320,"algorithm.PriorityQueue.new","algorithm/PriorityQueue.hx",11,0x6bf9d251)
HX_LOCAL_STACK_FRAME(_hx_pos_5e954be312f7dcde_16_add,"algorithm.PriorityQueue","add",0xfc34e4e1,"algorithm.PriorityQueue.add","algorithm/PriorityQueue.hx",16,0x6bf9d251)
HX_LOCAL_STACK_FRAME(_hx_pos_5e954be312f7dcde_31_pop,"algorithm.PriorityQueue","pop",0xfc405051,"algorithm.PriorityQueue.pop","algorithm/PriorityQueue.hx",31,0x6bf9d251)
HX_LOCAL_STACK_FRAME(_hx_pos_5e954be312f7dcde_35_peek,"algorithm.PriorityQueue","peek",0xbbfe56db,"algorithm.PriorityQueue.peek","algorithm/PriorityQueue.hx",35,0x6bf9d251)
HX_LOCAL_STACK_FRAME(_hx_pos_5e954be312f7dcde_39_isEmpty,"algorithm.PriorityQueue","isEmpty",0xca9b3103,"algorithm.PriorityQueue.isEmpty","algorithm/PriorityQueue.hx",39,0x6bf9d251)
HX_LOCAL_STACK_FRAME(_hx_pos_5e954be312f7dcde_43_contains,"algorithm.PriorityQueue","contains",0xe2286f5f,"algorithm.PriorityQueue.contains","algorithm/PriorityQueue.hx",43,0x6bf9d251)
namespace algorithm{

void PriorityQueue_obj::__construct( ::Dynamic compare){
            	HX_STACKFRAME(&_hx_pos_5e954be312f7dcde_11_new)
HXLINE(  12)		this->data = ::cpp::VirtualArray_obj::__new(0);
HXLINE(  13)		this->compare = compare;
            	}

Dynamic PriorityQueue_obj::__CreateEmpty() { return new PriorityQueue_obj; }

void *PriorityQueue_obj::_hx_vtable = 0;

Dynamic PriorityQueue_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PriorityQueue_obj > _hx_result = new PriorityQueue_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool PriorityQueue_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x49aa37de;
}

void PriorityQueue_obj::add( ::Dynamic item){
            	HX_STACKFRAME(&_hx_pos_5e954be312f7dcde_16_add)
HXLINE(  17)		int position = 0;
HXLINE(  19)		{
HXLINE(  19)			int _g = 0;
HXDLIN(  19)			int _g1 = this->data->get_length();
HXDLIN(  19)			while((_g < _g1)){
HXLINE(  19)				_g = (_g + 1);
HXDLIN(  19)				int i = (_g - 1);
HXLINE(  20)				if (::hx::IsGreater( this->compare(item,this->data->__get(i)),0 )) {
HXLINE(  21)					position = (i + 1);
            				}
            				else {
HXLINE(  23)					goto _hx_goto_1;
            				}
            			}
            			_hx_goto_1:;
            		}
HXLINE(  27)		this->data->insert(position,item);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PriorityQueue_obj,add,(void))

 ::Dynamic PriorityQueue_obj::pop(){
            	HX_STACKFRAME(&_hx_pos_5e954be312f7dcde_31_pop)
HXDLIN(  31)		return this->data->shift();
            	}


HX_DEFINE_DYNAMIC_FUNC0(PriorityQueue_obj,pop,return )

 ::Dynamic PriorityQueue_obj::peek(){
            	HX_STACKFRAME(&_hx_pos_5e954be312f7dcde_35_peek)
HXDLIN(  35)		return this->data->__get(0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PriorityQueue_obj,peek,return )

bool PriorityQueue_obj::isEmpty(){
            	HX_STACKFRAME(&_hx_pos_5e954be312f7dcde_39_isEmpty)
HXDLIN(  39)		return (this->data->get_length() == 0);
            	}


HX_DEFINE_DYNAMIC_FUNC0(PriorityQueue_obj,isEmpty,return )

bool PriorityQueue_obj::contains( ::Dynamic item){
            	HX_STACKFRAME(&_hx_pos_5e954be312f7dcde_43_contains)
HXDLIN(  43)		return this->data->contains(item);
            	}


HX_DEFINE_DYNAMIC_FUNC1(PriorityQueue_obj,contains,return )


PriorityQueue_obj::PriorityQueue_obj()
{
}

void PriorityQueue_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PriorityQueue);
	HX_MARK_MEMBER_NAME(data,"data");
	HX_MARK_MEMBER_NAME(compare,"compare");
	HX_MARK_END_CLASS();
}

void PriorityQueue_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(data,"data");
	HX_VISIT_MEMBER_NAME(compare,"compare");
}

::hx::Val PriorityQueue_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"add") ) { return ::hx::Val( add_dyn() ); }
		if (HX_FIELD_EQ(inName,"pop") ) { return ::hx::Val( pop_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { return ::hx::Val( data ); }
		if (HX_FIELD_EQ(inName,"peek") ) { return ::hx::Val( peek_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { return ::hx::Val( compare ); }
		if (HX_FIELD_EQ(inName,"isEmpty") ) { return ::hx::Val( isEmpty_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"contains") ) { return ::hx::Val( contains_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PriorityQueue_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"data") ) { data=inValue.Cast< ::cpp::VirtualArray >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"compare") ) { compare=inValue.Cast<  ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PriorityQueue_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("data",2a,56,63,42));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PriorityQueue_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::cpp::VirtualArray */ ,(int)offsetof(PriorityQueue_obj,data),HX_("data",2a,56,63,42)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PriorityQueue_obj,compare),HX_("compare",a5,18,69,83)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PriorityQueue_obj_sStaticStorageInfo = 0;
#endif

static ::String PriorityQueue_obj_sMemberFields[] = {
	HX_("data",2a,56,63,42),
	HX_("compare",a5,18,69,83),
	HX_("add",21,f2,49,00),
	HX_("pop",91,5d,55,00),
	HX_("peek",9b,e1,54,4a),
	HX_("isEmpty",43,de,5f,0c),
	HX_("contains",1f,5a,7b,2c),
	::String(null()) };

::hx::Class PriorityQueue_obj::__mClass;

void PriorityQueue_obj::__register()
{
	PriorityQueue_obj _hx_dummy;
	PriorityQueue_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("algorithm.PriorityQueue",2e,f3,1e,1b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PriorityQueue_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PriorityQueue_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PriorityQueue_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PriorityQueue_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace algorithm
