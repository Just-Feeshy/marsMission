// Generated by Haxe 4.3.1
#ifndef INCLUDED_algorithm_AI
#define INCLUDED_algorithm_AI

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(WorldMap)
HX_DECLARE_CLASS1(algorithm,AI)
HX_DECLARE_CLASS1(algorithm,Node)

namespace algorithm{


class HXCPP_CLASS_ATTRIBUTES AI_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef AI_obj OBJ_;
		AI_obj();

	public:
		enum { _hx_ClassId = 0x6868f12b };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="algorithm.AI")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"algorithm.AI"); }

		inline static ::hx::ObjectPtr< AI_obj > __new() {
			::hx::ObjectPtr< AI_obj > __this = new AI_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< AI_obj > __alloc(::hx::Ctx *_hx_ctx) {
			AI_obj *__this = (AI_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(AI_obj), false, "algorithm.AI"));
			*(void **)__this = AI_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~AI_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("AI",e8,38,00,00); }

		static ::Array< ::Dynamic> visitedNodes;
		static  ::algorithm::Node findPath(int cost, ::algorithm::Node start, ::algorithm::Node end, ::WorldMap world);
		static ::Dynamic findPath_dyn();

		static ::Array< ::Dynamic> retracePath( ::algorithm::Node node);
		static ::Dynamic retracePath_dyn();

		static ::Array< ::Dynamic> neighbors( ::algorithm::Node current,int cost, ::WorldMap world);
		static ::Dynamic neighbors_dyn();

		static int heuristic( ::algorithm::Node start, ::algorithm::Node end);
		static ::Dynamic heuristic_dyn();

		static bool sharePosList( ::algorithm::Node target,::Array< ::Dynamic> list);
		static ::Dynamic sharePosList_dyn();

};

} // end namespace algorithm

#endif /* INCLUDED_algorithm_AI */ 
