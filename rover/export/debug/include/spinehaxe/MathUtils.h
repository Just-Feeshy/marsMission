// Generated by Haxe 4.3.1
#ifndef INCLUDED_spinehaxe_MathUtils
#define INCLUDED_spinehaxe_MathUtils

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(spinehaxe,MathUtils)

namespace spinehaxe{


class HXCPP_CLASS_ATTRIBUTES MathUtils_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef MathUtils_obj OBJ_;
		MathUtils_obj();

	public:
		enum { _hx_ClassId = 0x0a4cddec };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="spinehaxe.MathUtils")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"spinehaxe.MathUtils"); }

		inline static ::hx::ObjectPtr< MathUtils_obj > __new() {
			::hx::ObjectPtr< MathUtils_obj > __this = new MathUtils_obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< MathUtils_obj > __alloc(::hx::Ctx *_hx_ctx) {
			MathUtils_obj *__this = (MathUtils_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(MathUtils_obj), false, "spinehaxe.MathUtils"));
			*(void **)__this = MathUtils_obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~MathUtils_obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static bool __SetStatic(const ::String &inString, Dynamic &ioValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("MathUtils",29,43,9d,c9); }

		static void __boot();
		static int MAX_INT;
		static int MIN_INT;
		static Float radDeg;
		static Float degRad;
		static Float radToDeg(Float rad);
		static ::Dynamic radToDeg_dyn();

		static Float degToRad(Float deg);
		static ::Dynamic degToRad_dyn();

		static Float cosDeg(Float degrees);
		static ::Dynamic cosDeg_dyn();

		static Float sinDeg(Float degrees);
		static ::Dynamic sinDeg_dyn();

		static Float clamp(Float value,Float min,Float max);
		static ::Dynamic clamp_dyn();

		static int signum(Float value);
		static ::Dynamic signum_dyn();

		static int random(int max);
		static ::Dynamic random_dyn();

		static int minInt(int a,int b);
		static ::Dynamic minInt_dyn();

		static int maxInt(int a,int b);
		static ::Dynamic maxInt_dyn();

};

} // end namespace spinehaxe

#endif /* INCLUDED_spinehaxe_MathUtils */ 
